{% if HasOperations -%}
{% if GenerateClientInterfaces -%}
export interface I{{ Class }} {
{%     for operation in Operations -%}
    {% template Client.Method.Documentation %}
    {{ operation.MethodAccessModifier }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false%}, {% endif %}{% endfor %}): Observable<AbpResult<{{ operation.ResultType }}>>;
{%     endfor -%}}
{% endif -%}

@Injectable()
export class {{ Class }} {% if HasBaseClass %}extends {{ BaseClass }} {% endif %}{% if GenerateClientInterfaces %}implements I{{ Class }} {% endif %}{
    private http: {{ AngularHttpClass }};

{% if HasExtendedConstructor == false -%}
    constructor({% if HasConfigurationClass %}@Inject({{ ConfigurationClass }}) configuration: {{ ConfigurationClass }}, {% endif %}@Inject({{ AngularHttpClass }}) http: {{ AngularHttpClass }}) {
{%     if HasBaseClass -%}
        super({% if HasConfigurationClass %}configuration{% endif %});
{%     endif -%}
        this.http = http;
    }
{% endif -%}
{% if HasExtensionCode -%}

    {{ ExtensionCode }}
{% endif -%}
{% for operation in Operations -%}

    {% template Client.Method.Documentation %}
    {{ operation.MethodAccessModifier }}{{ operation.ActualOperationName }}({% for parameter in operation.Parameters %}{{ parameter.VariableName }}{% if GenerateOptionalParameters and parameter.IsOptional %}?{% endif %}: {{ parameter.Type }}{{ parameter.TypePostfix }}{% if parameter.IsLast == false%}, {% endif %}{% endfor %}): Observable<AbpResult<{{ operation.ResultType }}>> {
        {% template Client.RequestUrl %}

{%     if operation.HasBody -%}
        {% template Client.RequestBody %}

{%     endif -%}
        let options_ = {
{%     if operation.HasBody -%}
            body: content_ as any,
{%     endif -%}
{%     if UseAngularHttpClient -%}
            observe: 'body' as HttpObserve,
            responseType: 'json' as any,
{%     else -%}
            method: '{{ operation.HttpMethodLower }}',
{%     endif -%}
{%     if operation.IsFile and UseAngularHttpClient == false -%}
            responseType: ResponseContentType.Blob,
{%     endif -%}
            headers: new {% if UseAngularHttpClient %}HttpHeaders{% else %}Headers{% endif %}({
{%     for parameter in operation.HeaderParameters -%}
                '{{ parameter.Name }}': {{ parameter.VariableName }} !== undefined && {{ parameter.VariableName }} !== null ? '' + {{ parameter.VariableName }} : '', 
{%     endfor -%}
{%     if operation.HasFormParameters == false -%}
                'Content-Type': '{{ operation.Consumes }}', 
{%     endif -%}
{%     if operation.HasResultType and operation.HasAcceptHeaderParameterParameter == false -%}
                'Accept': '{{ operation.Produces }}'
{%     endif -%}
            }),
            reportProgress: false,
            withCredentials: false
        };
        return this.http.request({% if UseAngularHttpClient %}'{{ operation.HttpMethodLower }}', {% endif %}url_, options_);
    }
{% endfor -%}
}
{% endif -%}
